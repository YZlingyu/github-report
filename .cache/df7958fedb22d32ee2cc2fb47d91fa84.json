{"dependencies":[{"name":"regex-escape","loc":{"line":7,"column":26}}],"generated":{"js":"\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar regexEscape = require(\"regex-escape\");\n\nvar ParseIt = function () {\n    /**\n     * ParseIt\n     * The `ParseIt` class. It can be used to use the same data object but with different formats/arguments.\n     *\n     * @name ParseIt\n     * @function\n     * @param {Object} obj An object containing the fields to replace.\n     */\n    function ParseIt(obj) {\n        _classCallCheck(this, ParseIt);\n\n        this.obj = obj || {};\n        this.re = new RegExp(\"^(\" + Object.keys(obj).map(regexEscape).join(\"|\") + \")\");\n    }\n\n    /**\n     * run\n     * Replaces the fields in the format string with data coming from the data object.\n     *\n     *\n     * @name parseIt\n     * @function\n     * @param {String} format The format input.\n     * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n     * @return {String} The result as string.\n     */\n\n\n    _createClass(ParseIt, [{\n        key: \"run\",\n        value: function run(format, args) {\n            var result = \"\";\n            args = args || [];\n            do {\n                var arr = format.match(this.re),\n                    field = arr && arr[1],\n                    c = field || format.charAt(0);\n\n                if (field) {\n                    var value = this.obj[field];\n                    if (typeof value === \"function\") {\n                        value = value.apply(this, args);\n                    }\n                    result += value;\n                } else {\n                    result += c;\n                }\n                format = format.substring(c.length);\n            } while (format);\n            return result;\n        }\n    }]);\n\n    return ParseIt;\n}();\n\n/**\n * parseIt\n * A wrapper around the `ParseIt` class. The `ParseIt` constructor is accessible using `parseIt.Parser`.\n *\n * @name parseIt\n * @function\n * @param {String} format The format input.\n * @param {Object} obj An object containing the fields to replace.\n * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n * @return {String} The result as string.\n */\n\n\nfunction parseIt(format, obj, args) {\n    return new ParseIt(obj).run(format, args);\n}\n\nparseIt.Parser = ParseIt;\n\nmodule.exports = parseIt;"},"hash":"fc55430f419c8614f84ae037e4b20fef"}